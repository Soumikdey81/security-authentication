import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Step 1: Load the dataset
# Replace 'TrainingData.csv' with the actual dataset file path
data = pd.read_csv('TrainingData.csv', header=None, names=['ID', 'Bitstream', 'Label'])

# Step 2: Clean and preprocess the data
# Check for valid bitstreams: must be 1024 bits long, contain only '0' or '1'
def is_valid_bitstream(bitstream):
    return isinstance(bitstream, str) and all(bit in {'0', '1'} for bit in bitstream) and len(bitstream) == 1024

# Filter rows with valid bitstreams
valid_data = data[data['Bitstream'].apply(is_valid_bitstream)].copy()

# Report invalid rows if any
invalid_rows = data[~data.index.isin(valid_data.index)]
if not invalid_rows.empty:
    print("Invalid rows detected and removed:")
    print(invalid_rows)

# Convert bitstreams into numerical feature vectors
def bitstream_to_vector(bitstream):
    return np.array([int(bit) for bit in bitstream])

# Apply transformation to valid bitstreams
valid_data.loc[:, 'Features'] = valid_data['Bitstream'].apply(bitstream_to_vector)

# Step 3: Prepare features and labels
X = np.stack(valid_data['Features'].values)  # Stack bitstream vectors into a 2D array
y = valid_data['Label'].values

# Step 4: Split the dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Train a Random Forest model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 6: Make predictions
y_pred = model.predict(X_test)

# Step 7: Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.4f}")

# Detailed classification report
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Step 8: Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 4))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=[0, 1], yticklabels=[0, 1])
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

# Step 9: Save the results (optional)
results = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
results.to_csv('random_forest_results.csv', index=False)
